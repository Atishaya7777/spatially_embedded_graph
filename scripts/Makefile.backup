# Makefile for Wiener Index Analysis - Standalone Implementation

# Variables
VENV_DIR = venv
PYTHON = $(VENV_DIR)/bin/python
PIP = $(VENV_DIR)/bin/pip
REQUIREMENTS = requirements.txt
MAIN_SCRIPT = main.py

# Default target
.PHONY: all
all: setup run

# Setup virtual environment and install dependencies
.PHONY: setup
setup: $(VENV_DIR)/bin/activate

$(VENV_DIR)/bin/activate: $(REQUIREMENTS)
	@echo "Setting up virtual environment..."
	python3 -m venv $(VENV_DIR)
	$(PIP) install --upgrade pip
	$(PIP) install -r $(REQUIREMENTS)
	@echo "Virtual environment setup complete!"

# Install/update requirements
.PHONY: install
install: $(VENV_DIR)/bin/activate
	@echo "Installing/updating requirements..."
	$(PIP) install -r $(REQUIREMENTS)

# Run the standalone Wiener index analysis
.PHONY: run
run: setup
	@echo "Running Wiener index analysis..."
	$(PYTHON) $(MAIN_SCRIPT)

# Quick test run with minimal parameters
.PHONY: test
test: setup
	@echo "Running quick test..."
	$(PYTHON) $(MAIN_SCRIPT) --quick-test

# Run multithreaded version (legacy - now integrated into main.py)
.PHONY: multithread
multithread: setup
	@echo "Running analysis with multithreading (integrated into main.py)..."
	$(PYTHON) $(MAIN_SCRIPT) --point-counts 6 7 8 --trials 3


# Clean up generated files
.PHONY: clean
clean:
	@echo "Cleaning up generated files..."
	rm -rf __pycache__/
	rm -rf */__pycache__/
	rm -rf */*/__pycache__/
	rm -f *.pyc
	rm -f */*.pyc
	rm -f */*/*.pyc
	rm -f *.log
	rm -f wiener_*.txt
	rm -f quick_test_results.json
	@echo "Cleanup complete!"

# Clean everything including virtual environment
.PHONY: clean-all
clean-all: clean
	@echo "Removing virtual environment..."
	rm -rf $(VENV_DIR)
	@echo "Full cleanup complete!"

# Reinstall everything from scratch
.PHONY: reinstall
reinstall: clean-all setup
	@echo "Reinstallation complete!"

# Create requirements.txt if it doesn't exist
.PHONY: create-requirements
create-requirements:
	@if [ ! -f $(REQUIREMENTS) ]; then \
		echo "Creating requirements.txt..."; \
		echo "numpy>=1.21.0" > $(REQUIREMENTS); \
		echo "matplotlib>=3.5.0" >> $(REQUIREMENTS); \
		echo "scipy>=1.7.0" >> $(REQUIREMENTS); \
		echo "tqdm>=4.62.0" >> $(REQUIREMENTS); \
		echo "networkx>=2.6.0" >> $(REQUIREMENTS); \
		echo "Requirements.txt created with basic dependencies!"; \
	else \
		echo "Requirements.txt already exists."; \
	fi

# Show help
.PHONY: help
help:
	@echo "Available targets for Wiener Index Analysis (Standalone Implementation):"
	@echo "  all           - Setup environment and run analysis"
	@echo "  setup         - Create virtual environment and install dependencies"
	@echo "  install       - Install/update requirements in existing venv"
	@echo "  run           - Run the complete Wiener index analysis"
	@echo "  test          - Run quick test with minimal parameters"
	@echo "  multithread   - Run analysis with larger point sets (multithreaded)"
	@echo "  clean         - Remove generated files and cache"
	@echo "  clean-all     - Remove everything including virtual environment"
	@echo "  reinstall     - Clean everything and reinstall from scratch"
	@echo "  create-requirements - Create basic requirements.txt if missing"
	@echo "  backup        - Create timestamped backup of main files"
	@echo "  dev-install   - Install development dependencies"
	@echo "  shell         - Start Python shell with environment loaded"
	@echo "  notebook      - Start Jupyter notebook"
	@echo "  info          - Show virtual environment information"
	@echo "  freeze        - Export current environment to requirements.txt"
	@echo "  help          - Show this help message"
	@echo ""
	@echo "Quick Start:"
	@echo "  make setup    # Set up the environment"
	@echo "  make run      # Run the complete analysis"
	@echo "  make test     # Quick test run"
	@echo ""
	@echo "Implementation:"
	@echo "  This project uses a single standalone main.py file containing"
	@echo "  all necessary components for Wiener index analysis including:"
	@echo "  - Point generation (convex hull, random)"
	@echo "  - Algorithm implementations (divide & conquer, brute force)"
	@echo "  - Statistical analysis and comparison"
	@echo "  - Visualization and plotting"
	@echo "  - Data management and logging"
	@echo ""
	@echo "Command Line Options:"
	@echo "  python main.py --quick-test           # Quick test mode"
	@echo "  python main.py --point-counts 4 5 6  # Custom point counts"
	@echo "  python main.py --trials 3            # Custom trial count"
	@echo "  python main.py --output-dir results  # Custom output directory"

# Advanced targets for development

# Interactive Python shell with environment loaded
.PHONY: shell
shell: setup
	@echo "Starting Python shell with virtual environment..."
	$(PYTHON)

# Install development dependencies
.PHONY: dev-install
dev-install: setup
	@echo "Installing development dependencies..."
	$(PIP) install ipython jupyter black flake8 pytest
	@echo "Development dependencies installed!"

# Format code with black
.PHONY: format
format: setup
	@echo "Formatting code with black..."
	$(PYTHON) -m black . --exclude $(VENV_DIR)

# Lint code with flake8
.PHONY: lint
lint: setup
	@echo "Linting code with flake8..."
	$(PYTHON) -m flake8 . --exclude $(VENV_DIR) --max-line-length=88

# Run Jupyter notebook
.PHONY: notebook
notebook: dev-install
	@echo "Starting Jupyter notebook..."
	$(VENV_DIR)/bin/jupyter notebook

# Show virtual environment info
.PHONY: info
info:
	@echo "Project Information:"
	@echo "==================="
	@echo "Virtual Environment: $(VENV_DIR)"
	@if [ -f $(VENV_DIR)/bin/python ]; then \
		echo "Python Version: $$($(PYTHON) --version)"; \
		echo "Pip Version: $$($(PIP) --version)"; \
		echo "Installed Packages:"; \
		$(PIP) list; \
	else \
		echo "Virtual environment not found. Run 'make setup' first."; \
	fi

# Export current environment to requirements.txt
.PHONY: freeze
freeze: setup
	@echo "Exporting current environment to requirements.txt..."
	$(PIP) freeze > $(REQUIREMENTS)
	@echo "Requirements exported to $(REQUIREMENTS)"

# Backup important files
.PHONY: backup
backup:
	@echo "Creating backup..."
	@mkdir -p backups
	@tar -czf backups/backup_$$(date +%Y%m%d_%H%M%S).tar.gz \
		--exclude=venv \
		--exclude=__pycache__ \
		--exclude=*.pyc \
		--exclude=*.log \
		--exclude=backups \
		.
	@echo "Backup created in backups/ directory"

# Test the refactored architecture with a quick run
.PHONY: test
test: setup
	@echo "Running quick test to verify refactored architecture..."
	@$(PYTHON) -c "\
import sys; \
sys.path.append('.'); \
from hamiltonian_wiener import WienerAnalysisOrchestrator; \
from generators.point_generator import PointGenerator; \
print('Testing modular architecture...'); \
generator = PointGenerator(); \
points = generator.generate_convex_hull_points(5, seed=42); \
print(f'Generated {len(points)} points: PASS'); \
orchestrator = WienerAnalysisOrchestrator(); \
print('Orchestrator initialized: PASS'); \
results = orchestrator.run_quick_test(n_points=5); \
print(f'Quick test completed: PASS'); \
print(f'Test results: {results[\"algorithms_tested\"]}'); \
print('Refactored architecture test: SUCCESS!')"

# Run individual component tests
.PHONY: test-components
test-components: setup
	@echo "Testing individual components..."
	@$(PYTHON) -c "\
import sys; \
sys.path.append('.'); \
from generators.point_generator import PointGenerator; \
from solvers.divide_conquer_solver import DivideConquerSolver; \
from solvers.brute_force_solver import BruteForceSolver; \
from analysis.statistical_analyzer import StatisticalAnalyzer; \
gen = PointGenerator(); \
points = gen.generate_convex_hull_points(6, seed=1); \
print(f'Point generation: PASS ({len(points)} points)'); \
dc = DivideConquerSolver(); \
bf = BruteForceSolver(); \
dc_path = dc.solve(points); \
bf_path = bf.solve_simple(points); \
print(f'Solvers: PASS (DC: {len(dc_path)# ...existing code...

# Show help
.PHONY: help
help:
    @echo "Available targets for Wiener Index Analysis (Refactored Modular Architecture):"
    @echo "  all           - Setup environment and run demo"
    @echo "  setup         - Create virtual environment and install dependencies"
    @echo "  install       - Install/update requirements in existing venv"
    @echo "  demo          - Run modular architecture demo"
    @echo "  run           - Run main Wiener index analysis"
    @echo "  summary       - Run summary analysis"
    @echo "  test          - Quick test of refactored architecture"
    @echo "  test-components - Test individual modular components"
    @echo "  viz-demo      - Demonstration of integrated visualization framework"
    @echo "  show-viz      - Show visualization capabilities"
    @echo "  run-examples  - Run all framework examples"
    @echo "  run-example   - Run specific example (use EXAMPLE=name)"
    @echo "  examples-help - Show available examples"
    @echo "  multithread   - Run multithreaded analysis"
    @echo "  clean         - Remove generated files and cache"
    @echo "  clean-all     - Remove everything including virtual environment"
    @echo "  reinstall     - Clean everything and reinstall from scratch"
    @echo "  create-requirements - Create basic requirements.txt if missing"
    @echo "  backup        - Create timestamped backup of project"
    @echo "  dev-install   - Install development dependencies"
    @echo "  format        - Format code with black"
    @echo "  lint          - Lint code with flake8"
    @echo "  shell         - Start Python shell with environment loaded"
    @echo "  notebook      - Start Jupyter notebook"
    @echo "  info          - Show virtual environment information"
    @echo "  freeze        - Export current environment to requirements.txt"
    @echo "  help          - Show this help message"
    @echo ""
    @echo "Examples:"
    @echo "  make run-examples              # Run all examples"
    @echo "  make run-example EXAMPLE=01_quick_start  # Run specific example"
    @echo "  make examples-help             # Show all available examples"
    @echo ""
    @echo "Architecture Overview:"
    @echo "  core/         - Point class and Wiener index calculation"
    @echo "  generators/   - Point set generation (convex, random, etc.)"
    @echo "  solvers/      - Algorithm implementations (D&C, brute force)"
    @echo "  analysis/     - Statistical analysis and comparison"
    @echo "  visualization/ - Plotting and visualization"
    @echo "  utils/        - Data management and logging"
    @echo "  examples/     - Comprehensive usage examples and tutorials"
    @echo ""
    @echo "Main Entry Points:"
    @echo "  hamiltonian_wiener.py - Full analysis orchestrator"
    @echo "  main_demo.py         - Architecture demonstration"	# ...existing code...
	
	# Remove the incomplete "ex" on line 220 and add the examples targets
	
	# Run all examples in sequence
	.PHONY: run-examples
	run-examples: setup
		@echo "Running all framework examples..."
		@echo "=================================="
		@cd examples && $(PYTHON) run_all_examples.py
	
	# Run specific example
	.PHONY: run-example
	run-example: setup
		@if [ -z "$(EXAMPLE)" ]; then \
			echo "Usage: make run-example EXAMPLE=01_quick_start"; \
			echo "Available examples:"; \
			ls examples/*.py | grep -E '^examples/[0-9]' | sort; \
		else \
			echo "Running example: $(EXAMPLE)"; \
			cd examples && $(PYTHON) $(EXAMPLE).py; \
		fi
	
	# Interactive example browser
	.PHONY: examples-help
	examples-help:
		@echo "Available Examples:"
		@echo "=================="
		@echo "Basic Examples (1-6):"
		@echo "  01_quick_start         - Basic framework usage"
		@echo "  02_algorithm_comparison - Compare different algorithms"
		@echo "  03_statistical_analysis - Deep statistical insights"
		@echo "  04_custom_points       - Custom point generation"
		@echo "  05_advanced_visualization - Professional plotting"
		@echo "  06_performance_benchmarking - Speed analysis"
		@echo ""
		@echo "Intermediate Examples (7-12):"
		@echo "  07_batch_processing    - Process multiple datasets"
		@echo "  08_parameter_optimization - Find optimal settings"
		@echo "  09_convergence_analysis - Algorithm behavior study"
		@echo "  10_algorithm_development - Add new algorithms"
		@echo "  11_research_workflow   - Complete research pipeline"
		@echo "  12_reproducible_experiments - Ensure reproducibility"
		@echo ""
		@echo "Advanced Examples (13-18):"
		@echo "  13_publication_quality - Research paper ready output"
		@echo "  14_scalability_testing - Large-scale performance"
		@echo "  15_educational_tutorial - Teaching and learning"
		@echo "  16_integration_testing - System validation"
		@echo "  17_performance_profiling - Detailed optimization"
		@echo "  18_troubleshooting_guide - Common issues and solutions"
		@echo ""
		@echo "Usage:"
		@echo "  make run-examples              # Run all examples"
		@echo "  make run-example EXAMPLE=01_quick_start  # Run specific example"
		@echo "  make examples-help             # Show this help"
	
	# Update the help target to include examples}, BF: {len(bf_path)} points)'); \
analyzer = StatisticalAnalyzer(); \
result = analyzer.run_single_experiment(points, dc, 'test'); \
print(f'Analysis: PASS (Wiener: {result.wiener_index:.2f})'); \
print('All components: SUCCESS!')"

# Visualization integration demo
.PHONY: viz-demo
viz-demo: setup
	@echo "Running visualization integration demonstration..."
	$(PYTHON) visualization_integration_demo.py

# Show visualization capabilities
.PHONY: show-viz
show-viz: setup
	@echo "Demonstrating visualization capabilities..."
	@$(PYTHON) -c "\
from visualization.visualizer import Visualizer; \
print('Enhanced Visualizer Capabilities:'); \
print('- Individual path visualization'); \
print('- Multi-algorithm comparison'); \
print('- Comprehensive study analysis'); \
print('- Statistical plots and reports'); \
print('- Best/worst case identification'); \
print('- Professional publication-quality output'); \
print('\\nIntegration Status: All visualize_*.py files consolidated!')"
